rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Sessions rules
    match /sessions/{sessionId} {
      function isOwner() {
        let parts = sessionId.split('_');
        return request.auth != null && parts.size() >= 2 && request.auth.uid == parts[0];
      }
      allow read: if request.auth != null && (resource == null || resource.data.userId == request.auth.uid);
      allow write: if isOwner() && request.resource.data.userId == request.auth.uid;
    }

    // User Exercises rules
    match /userExercises/{exerciseId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // User Rest Days rules
    match /userRestDays/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // User Favorites rules
    match /userFavorites/{userId} {
      allow read, create, update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false;
    }

    // Rules for user profile data (bio, etc.)
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for user-specific settings (dark mode, reminders)
    match /userSettings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // --- NEW SOCIAL FORUM RULES START HERE ---

    match /threads/{threadId} {
      // Anyone can read threads if they are logged in.
      allow read: if request.auth != null;

      // A user can create a thread if they are logged in, the data is valid,
      // and they are the author.
      allow create: if request.auth != null
                    && request.resource.data.userId == request.auth.uid
                    && request.resource.data.title.size() > 5 && request.resource.data.title.size() < 100
                    && request.resource.data.content.size() > 5 && request.resource.data.content.size() < 5000;

      // Only the original author can update or delete their thread.
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;

      // Rules for the 'replies' subcollection within each thread
      match /replies/{replyId} {
        // Anyone can read replies if they are logged in.
        allow read: if request.auth != null;

        // A user can create a reply if they are logged in and the data is valid.
        allow create: if request.auth != null
                      && request.resource.data.userId == request.auth.uid
                      && request.resource.data.content.size() > 0 && request.resource.data.content.size() < 5000;

        // Only the author of the reply can update or delete it.
        allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      }
    }
    // --- NEW SOCIAL FORUM RULES END HERE ---
  }
}